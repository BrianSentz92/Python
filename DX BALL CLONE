import pygame
import random

# Initialize pygame
pygame.init()

# Define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)

# Set screen size to 1280x720 (theater mode size)
SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

# Define paddle and ball properties
PADDLE_WIDTH = 150
PADDLE_HEIGHT = 10
BALL_RADIUS = 8

# Set up the clock
clock = pygame.time.Clock()

# Define font for score (increased size for readability)
font = pygame.font.SysFont("Arial", 30)


# Paddle class
class Paddle:
    def __init__(self):
        self.rect = pygame.Rect(
            (SCREEN_WIDTH // 2 - PADDLE_WIDTH // 2, SCREEN_HEIGHT - 40, PADDLE_WIDTH, PADDLE_HEIGHT))
        self.speed = 5

    def move(self, dx):
        self.rect.x += dx
        if self.rect.left < 0:
            self.rect.left = 0
        elif self.rect.right > SCREEN_WIDTH:
            self.rect.right = SCREEN_WIDTH

    def draw(self, screen):
        pygame.draw.rect(screen, BLUE, self.rect)


# Ball class
class Ball:
    def __init__(self, speed_multiplier=1):
        self.rect = pygame.Rect(SCREEN_WIDTH // 2 - BALL_RADIUS, SCREEN_HEIGHT // 2 - BALL_RADIUS, BALL_RADIUS * 2,
                                BALL_RADIUS * 2)
        self.dx = random.choice([3, -3]) * speed_multiplier
        self.dy = -3 * speed_multiplier

    def move(self):
        self.rect.x += self.dx
        self.rect.y += self.dy

    def bounce(self):
        self.dy = -self.dy

    def draw(self, screen):
        pygame.draw.circle(screen, RED, self.rect.center, BALL_RADIUS)


# Brick class
class Brick:
    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, 60, 20)

    def draw(self, screen):
        pygame.draw.rect(screen, GREEN, self.rect)


# Function to reset the game state with more bricks for the next level
def reset_game(level):
    paddle = Paddle()
    ball = Ball(speed_multiplier=1 + (level * 0.1))  # Increase ball speed as level increases
    bricks = []

    # Calculate the number of bricks based on the window size (1280x720)
    brick_width = 60
    brick_height = 20
    padding = 10  # Padding between bricks

    # Determine how many bricks can fit on the screen horizontally and vertically
    num_bricks_x = (SCREEN_WIDTH - padding * 2) // (brick_width + padding)
    num_bricks_y = (SCREEN_HEIGHT // 3) // (brick_height + padding)  # Top 1/3 of the screen for bricks

    for i in range(num_bricks_y):
        for j in range(num_bricks_x):
            x_pos = padding + j * (brick_width + padding)
            y_pos = padding + i * (brick_height + padding)
            brick = Brick(x_pos, y_pos)
            bricks.append(brick)

    return paddle, ball, bricks


# Function to display text centered on the screen
def display_text(text, font, color, y_offset=0):
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + y_offset))
    screen.blit(text_surface, text_rect)


# Main game loop
def game_loop():
    level = 0
    paddle, ball, bricks = reset_game(level)

    # Game variables
    score = 0
    game_over = False

    # Main loop
    while not game_over:
        screen.fill(BLACK)

        # Event handling
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                game_over = True

        # Paddle movement
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            paddle.move(-paddle.speed)
        if keys[pygame.K_RIGHT]:
            paddle.move(paddle.speed)

        # Ball movement
        ball.move()

        # Ball collisions with walls
        if ball.rect.left <= 0 or ball.rect.right >= SCREEN_WIDTH:
            ball.dx = -ball.dx
        if ball.rect.top <= 0:
            ball.bounce()
        if ball.rect.bottom >= SCREEN_HEIGHT:
            game_over = True  # Ball falls out of the screen (game over)

        # Ball and paddle collision
        if ball.rect.colliderect(paddle.rect):
            ball.bounce()

        # Ball and brick collision
        for brick in bricks[:]:
            if ball.rect.colliderect(brick.rect):
                ball.bounce()
                bricks.remove(brick)
                score += 1

        # Draw game objects
        paddle.draw(screen)
        ball.draw(screen)
        for brick in bricks:
            brick.draw(screen)

        # Draw score and level
        score_text = font.render(f"Score: {score} | Level: {level + 1}", True, WHITE)
        screen.blit(score_text, (10, 10))

        # Check if the level is complete
        if len(bricks) == 0:
            # Show message to go to the next level
            display_text("Level Complete! Press N to go to next level.", font, WHITE, 0)
            pygame.display.flip()

            # Wait for player input to go to next level
            waiting_for_next_level = True
            while waiting_for_next_level:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        waiting_for_next_level = False
                        game_over = True
                    if event.type == pygame.KEYDOWN:
                        if event.key == pygame.K_n:  # Go to next level
                            level += 1
                            paddle, ball, bricks = reset_game(level)
                            waiting_for_next_level = False

        # Update the screen
        pygame.display.flip()

        # Set the FPS (frames per second)
        clock.tick(60)

    # Game over screen
    display_text("Game Over! Press R to Restart or Q to Quit", font, WHITE, 0)
    pygame.display.flip()

    # Wait for the user to either restart or quit
    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                waiting = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_r:  # Restart the game
                    game_loop()
                    waiting = False
                elif event.key == pygame.K_q:  # Quit the game
                    waiting = False

    pygame.quit()


# Start the game
if __name__ == "__main__":
    game_loop()
