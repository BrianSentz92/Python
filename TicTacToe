# Tic-Tac-Toe Game

# Function to initialize the game board
def initialize_board():
    return [' ' for _ in range(9)]  # Creates a list with 9 empty spaces


# Function to print the current game board
def print_board(board):
    print("\n")
    for i in range(0, 9, 3):  # Iterate over rows
        print(f"{board[i]} | {board[i + 1]} | {board[i + 2]}")  # Print each row
        if i < 6:
            print("--+---+--")  # Print separators between rows
    print("\n")


# Function to check if a player has won
def check_winner(board, player):
    # Check all possible winning combinations (rows, columns, diagonals)
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # Rows
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # Columns
        [0, 4, 8], [2, 4, 6]  # Diagonals
    ]

    for combo in win_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] == player:
            return True  # Player wins if any combination is filled by the same player's symbol
    return False


# Function to check if the board is full
def is_board_full(board):
    return ' ' not in board  # Board is full if there are no empty spaces left


# Function to handle player input and move
def player_move(board, player):
    valid_move = False
    while not valid_move:
        try:
            move = int(input(f"Player {player}, enter your move (1-9): ")) - 1  # 1-9 mapped to 0-8
            if board[move] == ' ':
                board[move] = player
                valid_move = True
            else:
                print("That position is already taken. Try again.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter a number between 1 and 9.")


# Main function to control the game flow
def main():
    board = initialize_board()
    current_player = 'X'  # X starts first

    while True:
        print_board(board)  # Display the current board
        player_move(board, current_player)  # Get the player's move

        if check_winner(board, current_player):  # Check if the current player won
            print_board(board)
            print(f"Player {current_player} wins!")
            break

        if is_board_full(board):  # Check if the board is full (tie condition)
            print_board(board)
            print("It's a tie!")
            break

        # Switch players
        current_player = 'O' if current_player == 'X' else 'X'


if __name__ == "__main__":
    main()
