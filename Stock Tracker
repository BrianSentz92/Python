import sqlite3
import time
import random


def create_database():
    conn = sqlite3.connect("stocks.db")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS stock_prices (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        stock_symbol TEXT NOT NULL,
                        price REAL,
                        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
    conn.commit()
    conn.close()


def add_stock_price(stock_symbol, price):
    conn = sqlite3.connect("stocks.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO stock_prices (stock_symbol, price) VALUES (?, ?)", (stock_symbol, price))
    conn.commit()
    conn.close()


def view_stock_prices(stock_symbol=None):
    conn = sqlite3.connect("stocks.db")
    cursor = conn.cursor()
    if stock_symbol:
        cursor.execute("SELECT * FROM stock_prices WHERE stock_symbol = ? ORDER BY timestamp DESC", (stock_symbol,))
    else:
        cursor.execute("SELECT * FROM stock_prices ORDER BY timestamp DESC")
    stocks = cursor.fetchall()
    conn.close()
    return stocks


def generate_ascii_graph(stock_symbol):
    stock_data = view_stock_prices(stock_symbol)
    if not stock_data:
        print("No stock data available for the selected stock.")
        return

    print(f"\nStock Price Trend for {stock_symbol}")
    print("Timestamp".ljust(25) + "| Price")
    print("-" * 40)

    for stock in reversed(stock_data[-10:]):  # Show last 10 records
        price_bar = "#" * int(stock[2] // 5)
        print(f"{stock[3].ljust(25)}| {price_bar}")


def simulate_stock_updates(stocks):
    while True:
        stock_symbol = random.choice(stocks)
        new_price = round(random.uniform(100, 500), 2)
        add_stock_price(stock_symbol, new_price)
        print(f"Updated {stock_symbol}: ${new_price}")
        time.sleep(5)


def main():
    create_database()
    stocks = ["AAPL", "TSLA", "MSFT", "GOOGL", "AMZN", "NFLX", "META", "NVDA", "BRK.A", "JPM"]
    print("Tracking stock prices for:", ", ".join(stocks))
    while True:
        print("\nStock Price Tracker")
        print("1. View Stock Prices")
        print("2. Generate ASCII Graph for Stock")
        print("3. Simulate Real-Time Stock Updates")
        print("4. Exit")
        try:
            choice = input("Enter your choice: ")
            if choice == "1":
                stock_symbol = input("Enter a stock symbol to filter (or press Enter to view all): ").upper()
                stock_data = view_stock_prices(stock_symbol if stock_symbol else None)
                if stock_data:
                    print("\nID | Stock | Price | Timestamp")
                    print("------------------------------------")
                    for stock in stock_data:
                        print(f"{stock[0]} | {stock[1]} | ${stock[2]:.2f} | {stock[3]}")
                else:
                    print("No stock data available for the selected stock.")
            elif choice == "2":
                stock_symbol = input("Enter a stock symbol to generate ASCII graph: ").upper()
                generate_ascii_graph(stock_symbol)
            elif choice == "3":
                print("Simulating real-time stock updates...")
                simulate_stock_updates(stocks)
            elif choice == "4":
                print("Exiting program.")
                break
            else:
                print("Invalid choice. Please try again.")
        except ValueError:
            print("Invalid input. Please enter the correct data type.")


if __name__ == "__main__":
    main()
